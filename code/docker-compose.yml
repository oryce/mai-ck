networks:
  internal:

volumes:
  pg_data:
  ollama_data:
  webui_data:
  keycloak_data:

services:
  backend:
    build: backend
    restart: unless-stopped

    env_file: config/backend/.env

    ports:
      - 8000:80
    networks:
      - internal

    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started

  frontend:
    build:
      context: frontend
      args:
        API_BASE: http://backend
    restart: unless-stopped

    ports:
      - 3000:3000
    networks:
      - internal

    depends_on:
      keycloak:
        condition: service_started

  postgres:
    image: postgres
    restart: unless-stopped

    env_file: config/postgres/.env
    environment:
      PGDATA: /var/lib/postgresql/data

    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./config/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro

    networks:
      - internal

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    image: keycloak/keycloak
    container_name: keycloak
    command: ["start-dev", "--import-realm"]
    env_file: config/keycloak/.env
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - type: bind
        source: ./resources/realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
        read_only: true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
        - "11434:11434"
    volumes:
        - ollama_data:/root/.ollama
    restart: unless-stopped

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    ports:
        - "3001:8080"
    environment:
        - OLLAMA_API_BASE_URL=http://ollama:11434
    volumes:
        - webui_data:/app/backend/data
    depends_on:
        - ollama
    restart: unless-stopped